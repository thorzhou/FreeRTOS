在一般的裸机程序中延时是让CPU空等来达到延时的效果，使用RTOS的优势就是榨干CPU的性能，永远不让它闲着。
RTOS中的延时叫阻塞延时，即任务需要延时的时候，任务放弃CPU的使用权，让CPU干别的事，当任务延时时间到，重新获取CPU使用权，任务继续运行，充分利用CPU资源。
当任务延时，CPU又没有其他任务可以运行时，RTOS会创建一个空闲任务，在freertos中空闲任务时系统在调度器里最低优先级的任务。主要做一些系统内存的清理工作。

本章实现的空闲任务只是对一个全局变量进行计数。实际应用中，当系统进入空闲任务的时候，可在空闲任务中让MCU进入休眠或者低功耗等操作。

目前我们在创建任务时使用的栈和TCB都使用的是静态的内存，即需要预先定义好内存，空闲任务也不例外。定义在main.c中。
1.定义空闲任务的栈，默认512byte
2.定义空闲任务的任务控制块
3.创建空闲任务，vTaskStartScheduler()
4.实现阻塞延时 vTaskDelay() //main.c
    - 调用阻塞延时后，任务会被剥离CPU使用权，然后进入阻塞状态，直到延时结束。
5.在TCB中增加成员用于记录延时时间
6.修改vTaskSwitchContext()选择优先级最高的任务
    - 如果是空闲任务就检查任务1任务2是否在延时，不在就运行，如果是任务1或者任务2就先检查另外一个任务再检查当前任务，都不是就运行空闲任务。
7.SysTick中断服务
8.初始化SysTick
